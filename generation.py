"""
Module that handles the finished GAN.
Used by app.py to save new generated map with given conditions thanks
to save_data() function.
Show_3D_results() function can be used to display a new generated map in 3D.

Functions:
    generate(conditions): Uses generator and discriminator to create a heightmap
        and the associated probability of being real.

    save_data(number, h_max, h_mean): Saves 2D and 3D display of queried
        heightmap for app.py to use.

    show_3d_results(h_max, h_mean): Shows a heightmap generated with
        the conditions given in input and returns the probability that the image is real.
"""
from pathlib import Path
import matplotlib.pyplot as plt
import torch
import torchvision.utils as vutils
import numpy as np
from src.utils.image3d import show_3d, display_3d
from src.networks.discriminator.discriminator import Discriminator
from src.networks.generator.generator import Generator, NOISE_LAYERS


DISCRIMINATOR = Discriminator(100)
DISCRIMINATOR.load_state_dict(torch.load("./networks_data/discriminator/4.pth"))

GENERATOR = Generator(0)
GENERATOR.load_state_dict(torch.load("./networks_data/generator/4.pth"))

SAVE_PATH = Path('./static/images')
SAVE_PATH.mkdir(parents=True, exist_ok=True)


def generate(conditions):
    """
    Uses generator and discriminator to create a heightmap and the assoicated
    probability of being real.

    Parameters:
        conditions (Tensor of shape [1, 2]): desired max and mean of image output.

    Return:
        output (Tensor of shape [1, 1, 100, 100]): output image.

        proba_real (float): probability that image is real according to discriminator.
    """
    noise = torch.randn(1, NOISE_LAYERS, 1, 1)
    output = GENERATOR(noise, conditions)
    proba_real = (DISCRIMINATOR.soft_max(DISCRIMINATOR(output))[0][0]).item()
    proba_real = format(proba_real, '.3f')
    return output, proba_real


def save_data(number=1, h_max=1000, h_mean=500):
    """
    Saves 2D and 3D display of queried heightmap for app.py to use.

    Parameters:
        number (int): index of generated image, it will be saved as img_number.png.

        h_max (int): max height desired.

        h_mean (int): mean height desired.

    Return:
        proba_real (float): probability that saved heightmap is real.
    """
    conditions = torch.tanh(torch.tensor([[float(h_max), float(h_mean)]]))

    output, proba_real = generate(conditions)

    # Saves 2D display
    image = vutils.make_grid(output, padding=2, normalize=True)
    vutils.save_image(image, SAVE_PATH / 'img_{}.png'.format(number))

    # Saves 3D display
    show_3d(output[0, 0].detach().numpy(), '')
    plt.savefig(SAVE_PATH / 'img_{}.png'.format(number+1))
    return proba_real


def show_3d_results(h_max=1000, h_mean=500):
    """
    Shows a heightmap generated with the conditions given in input.
    Prints the probability that the image is real.

    Parameters:
        h_max (int): max height desired.

        h_mean (int): mean height desired.
    """
    conditions = torch.tensor([[float(h_max), float(h_mean)]])
    output, proba_real = generate(conditions)
    print('Probability of real image: {}'.format(proba_real))
    image = vutils.make_grid(output, padding=2, normalize=True)
    plt.title('2D image generated by the Generator')
    plt.imshow(np.transpose(image.detach(), (1, 2, 0)))
    display_3d(output[0, 0].detach().numpy())
    show_3d(output[0, 0].detach().numpy())
    plt.show()


if __name__ == "__main__":
    show_3d_results()
